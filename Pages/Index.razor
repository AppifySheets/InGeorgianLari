@page "/"
@using InGeorgianLari.Models
@using InGeorgianLari.Services
@inject IExchangeRateService ExchangeRateService
@inject IJSRuntime JSRuntime

<PageTitle>ლარის კონვერტორი</PageTitle>

<div class="container page-container">
    <div class="converter-card">
        <h1 class="title">
            <span class="flag">🇬🇪</span>
            ლარის კონვერტორი
        </h1>
        
        @if (error)
        {
            <div class="error">
                <p>ვერ მოხერხდა კურსების ჩატვირთვა. გთხოვთ სცადოთ მოგვიანებით.</p>
                <button class="btn-retry" @onclick="LoadRates">თავიდან ცდა</button>
            </div>
        }
        else if (!initialLoad && loading)
        {
            <div class="loading">
                <div class="spinner"></div>
                <p>იტვირთება...</p>
            </div>
        }
        else
        {
            @if (rates != null && currentRate != null)
            {
                <div class="update-notification">
                    <div class="update-time">
                        <span class="label">კურსი განახლდა:</span>
                        <span class="time">@GetGeorgianDate(DateTime.Parse(currentRate.ValidFromDate))</span>
                    </div>
                </div>
            }
            
            <div class="input-section">
                <div class="amount-input">
                    <label for="amount">თანხა</label>
                    <input id="amount" type="number" @bind="amount" @bind:event="oninput" min="0" step="0.01" placeholder="0.00" />
                </div>
                
                <div class="currency-select">
                    <label for="currency">ვალუტა</label>
                    <select id="currency" @bind="selectedCurrency" @bind:event="onchange" @bind:after="OnCurrencyChanged">
                        <option value="USD">🇺🇸 USD - აშშ დოლარი</option>
                        <option value="EUR">🇪🇺 EUR - ევრო</option>
                        <option value="GBP">🇬🇧 GBP - ბრიტანული ფუნტი</option>
                    </select>
                </div>
            </div>
            
            @if (rates != null && currentRate != null)
            {
                <div class="rate-display">
                    <div class="rate-card">
                        <span class="rate-label">მიმდინარე კურსი</span>
                        <span class="rate-value">1 @selectedCurrency = ₾ @currentRate.Rate.ToString("N4")</span>
                    </div>
                </div>
            }
            
            <div class="result-section">
                <div class="equals">=</div>
                <div class="result">
                    <span class="amount">₾ @(rates != null ? calculatedAmount.ToString("N2") : "0.00")</span>
                    <span class="currency-name">ქართული ლარი</span>
                </div>
            </div>
            
            @if (rates != null)
            {
                <div class="chart-section">
                    <h3>კურსის დინამიკა (ბოლო 3 თვე)</h3>
                    <div class="chart-container">
                        <canvas id="rateChart"></canvas>
                    </div>
                </div>
            }
        }
    </div>
    
    <footer>
        <p>კურსები მოწოდებულია საქართველოს ეროვნული ბანკის მიერ</p>
    </footer>
</div>

@code {
    decimal amount = 100;
    string selectedCurrency = "USD";
    bool loading = false; // Start with loading false to avoid initial spinner
    bool initialLoad = true; // Track if this is the first load
    bool error = false;
    bool chartNeedsUpdate = false; // Track when chart needs updating
    ExchangeRatesResponse? rates;
    List<HistoricalRate>? historicalRates;
    
    // Only USD, EUR, and GBP
    List<CurrencyRate> availableRates => rates?.Rates.Where(r => r.Code == "USD" || r.Code == "EUR" || r.Code == "GBP").ToList() ?? new();
    CurrencyRate? currentRate => rates?.Rates.FirstOrDefault(r => r.Code == selectedCurrency);
    decimal calculatedAmount => currentRate != null && currentRate.Quantity > 0 ? amount * currentRate.Rate / currentRate.Quantity : 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadRates();
        initialLoad = false; // Set to false after first load
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Particles are now created globally in MainLayout
        }
        
        // We need to load chart after DOM is ready
        if (chartNeedsUpdate && rates != null && !error && historicalRates != null)
        {
            await UpdateChart();
            chartNeedsUpdate = false;
        }
    }
    
    
    async Task LoadRates()
    {
        loading = true;
        error = false;
        
        rates = await ExchangeRateService.GetCurrentRatesAsync();
        
        loading = false;
        error = rates == null;
        
        if (!error && rates != null)
        {
            // Load historical data immediately after getting current rates
            await LoadHistoricalRates();
        }
    }
    
    Task LoadHistoricalRates()
    {
        // For now, we'll simulate historical data
        // In a real app, you'd call the API for historical rates
        var endDate = DateTime.Now;
        var startDate = endDate.AddMonths(-3); // 3 months of data
        
        historicalRates = GenerateSimulatedHistoricalData(startDate, endDate);
        chartNeedsUpdate = true;
        // Chart will be updated in OnAfterRenderAsync when DOM is ready
        StateHasChanged(); // Trigger re-render to update chart
        return Task.CompletedTask;
    }
    
    async Task OnCurrencyChanged()
    {
        if (!loading && !error)
        {
            await LoadHistoricalRates();
        }
    }
    
    List<HistoricalRate> GenerateSimulatedHistoricalData(DateTime start, DateTime end)
    {
        var data = new List<HistoricalRate>();
        var baseRate = currentRate?.Rate ?? 2.7m;
        var random = new Random(42); // Fixed seed for consistent data
        
        // Start with a slightly lower rate 3 months ago
        var startRate = baseRate * 0.95m;
        var currentRateValue = startRate;
        
        for (var date = start; date <= end; date = date.AddDays(1))
        {
            // Simulate more realistic variations with trend
            var dailyChange = (decimal)(random.NextDouble() * 0.01 - 0.003); // Slight upward trend
            currentRateValue *= (1 + dailyChange);
            
            // Add some volatility
            var volatility = (decimal)(random.NextDouble() * 0.02 - 0.01);
            var rate = currentRateValue * (1 + volatility);
            
            data.Add(new HistoricalRate { Date = date, Rate = rate });
        }
        
        // Ensure the last rate matches the current rate
        if (data.Any())
        {
            data[data.Count - 1].Rate = baseRate;
        }
        
        return data;
    }
    
    async Task UpdateChart()
    {
        if (historicalRates == null || !historicalRates.Any()) return;
        
        // For 3 months of data, show weekly labels to avoid crowding
        var weeklyData = historicalRates
            .Where((h, index) => index % 7 == 0 || index == historicalRates.Count - 1)
            .ToList();
        
        var labels = weeklyData.Select(h => h.Date.ToString("dd MMM")).ToArray();
        var data = weeklyData.Select(h => h.Rate).ToArray();
        
        await JSRuntime.InvokeVoidAsync("createChart", "rateChart", labels, data, selectedCurrency);
    }
    
    class HistoricalRate
    {
        public DateTime Date { get; set; }
        public decimal Rate { get; set; }
    }
    
    string GetGeorgianDate(DateTime date)
    {
        var monthNames = new[] {
            "იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი",
            "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"
        };
        
        return $"{date.Day} {monthNames[date.Month - 1]}, {date.Year}";
    }
}

<style>
    :root {
        --primary: #FF5C5C;
        --secondary: #4A90E2;
        --background: #0F0F0F;
        --card: #1A1A1A;
        --card-light: #252525;
        --text: #E5E5E5;
        --text-light: #A0A0A0;
        --border: #2A2A2A;
        --shadow: rgba(0, 0, 0, 0.5);
        --success: #10B981;
        --danger: #EF4444;
    }
    
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    body {
        background: var(--background);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        color: var(--text);
    }
    
    .container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    
    .converter-card {
        background: var(--card);
        border-radius: 24px;
        padding: 48px;
        box-shadow: 0 20px 40px var(--shadow);
        max-width: 800px;
        width: 100%;
        animation: slideUp 0.5s ease-out;
        border: 1px solid var(--border);
    }
    
    .title {
        text-align: center;
        color: var(--text);
        font-size: 32px;
        margin-bottom: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
    }
    
    .flag {
        font-size: 40px;
    }
    
    .update-notification {
        background: linear-gradient(135deg, var(--secondary), #5BA3F5);
        color: white;
        padding: 20px;
        border-radius: 16px;
        margin-bottom: 32px;
        text-align: center;
        box-shadow: 0 8px 20px rgba(74, 144, 226, 0.3);
    }
    
    .update-time {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    .update-time .label {
        font-size: 14px;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .update-time .time {
        font-size: 24px;
        font-weight: 700;
    }
    
    .input-section {
        display: grid;
        gap: 24px;
        margin-bottom: 32px;
    }
    
    .amount-input, .currency-select {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    label {
        color: var(--text-light);
        font-size: 14px;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    input, select {
        padding: 16px 20px;
        border: 2px solid var(--border);
        border-radius: 12px;
        font-size: 18px;
        color: var(--text);
        background: var(--card-light);
        transition: all 0.3s ease;
    }
    
    input:focus, select:focus {
        outline: none;
        border-color: var(--secondary);
        box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
    }
    
    .rate-display {
        margin-bottom: 32px;
    }
    
    .rate-card {
        background: var(--card-light);
        border: 2px solid var(--border);
        border-radius: 16px;
        padding: 24px;
        text-align: center;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    .rate-label {
        color: var(--text-light);
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .rate-value {
        color: var(--text);
        font-size: 28px;
        font-weight: 700;
    }
    
    .result-section {
        background: linear-gradient(135deg, var(--primary), #FF7B7B);
        border-radius: 16px;
        padding: 32px;
        text-align: center;
        color: white;
        margin-bottom: 40px;
        position: relative;
        overflow: hidden;
    }
    
    .result-section::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
        animation: rotate 20s linear infinite;
    }
    
    .equals {
        font-size: 24px;
        margin-bottom: 16px;
        opacity: 0.9;
    }
    
    .result {
        position: relative;
        z-index: 1;
    }
    
    .result .amount {
        font-size: 48px;
        font-weight: 700;
        display: block;
        margin-bottom: 8px;
    }
    
    .result .currency-name {
        font-size: 18px;
        opacity: 0.9;
    }
    
    .chart-section {
        margin-top: 40px;
    }
    
    .chart-section h3 {
        color: var(--text);
        font-size: 24px;
        margin-bottom: 24px;
        text-align: center;
    }
    
    .chart-container {
        background: var(--card-light);
        border: 2px solid var(--border);
        border-radius: 16px;
        padding: 24px;
        height: 300px;
        position: relative;
    }
    
    #rateChart {
        width: 100% !important;
        height: 100% !important;
    }
    
    .loading, .error {
        text-align: center;
        padding: 40px;
    }
    
    .spinner {
        width: 48px;
        height: 48px;
        border: 4px solid var(--border);
        border-top-color: var(--primary);
        border-radius: 50%;
        margin: 0 auto 16px;
        animation: spin 1s linear infinite;
    }
    
    .error p {
        color: var(--text);
        margin-bottom: 16px;
    }
    
    .btn-retry {
        background: var(--primary);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .btn-retry:hover {
        background: #FF7B7B;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(255, 92, 92, 0.3);
    }
    
    footer {
        margin-top: 40px;
        text-align: center;
        color: var(--text-light);
        font-size: 14px;
        line-height: 1.6;
    }
    
    .collab {
        font-size: 12px;
        font-style: italic;
        margin-top: 8px;
    }
    
    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
    
    @@keyframes rotate {
        to {
            transform: rotate(360deg);
        }
    }
    
    @@media (max-width: 600px) {
        .converter-card {
            padding: 32px 24px;
        }
        
        .title {
            font-size: 24px;
        }
        
        .update-time .time {
            font-size: 20px;
        }
        
        .rate-value {
            font-size: 24px;
        }
        
        .result .amount {
            font-size: 36px;
        }
        
        .chart-container {
            height: 250px;
        }
    }
</style>